import{_ as e,c as o,o as t,O as c}from"./chunks/framework.403748ff.js";const y=JSON.parse('{"title":"object属性遍历","description":"object属性遍历相关方法","frontmatter":{"title":"object属性遍历","description":"object属性遍历相关方法","aside":false,"date":"2022-12-5","tags":["javascript"]},"headers":[{"level":2,"title":"for...in","slug":"for-in","link":"#for-in","children":[]},{"level":2,"title":"Object.keys(obj)","slug":"object-keys-obj","link":"#object-keys-obj","children":[]},{"level":2,"title":"Object.getOwnPropertyNames(obj)","slug":"object-getownpropertynames-obj","link":"#object-getownpropertynames-obj","children":[]},{"level":2,"title":"Object.getOwnPropertySymbols(obj)","slug":"object-getownpropertysymbols-obj","link":"#object-getownpropertysymbols-obj","children":[]},{"level":2,"title":"Reflect.ownKeys(obj)","slug":"reflect-ownkeys-obj","link":"#reflect-ownkeys-obj","children":[]},{"level":2,"title":"判断某个属性是否为自身属性","slug":"判断某个属性是否为自身属性","link":"#判断某个属性是否为自身属性","children":[]}],"relativePath":"posts/javascript/object属性遍历.md"}'),l={name:"posts/javascript/object属性遍历.md"},a=c('<h1 id="object属性遍历相关方法" tabindex="-1">object属性遍历相关方法 <a class="header-anchor" href="#object属性遍历相关方法" aria-label="Permalink to &quot;object属性遍历相关方法&quot;">​</a></h1><h2 id="for-in" tabindex="-1"><code>for...in</code> <a class="header-anchor" href="#for-in" aria-label="Permalink to &quot;`for...in`&quot;">​</a></h2><blockquote><p>循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。</p></blockquote><h2 id="object-keys-obj" tabindex="-1"><code>Object.keys(obj)</code> <a class="header-anchor" href="#object-keys-obj" aria-label="Permalink to &quot;`Object.keys(obj)`&quot;">​</a></h2><blockquote><p>返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）的键名。</p></blockquote><h2 id="object-getownpropertynames-obj" tabindex="-1"><code>Object.getOwnPropertyNames(obj)</code> <a class="header-anchor" href="#object-getownpropertynames-obj" aria-label="Permalink to &quot;`Object.getOwnPropertyNames(obj)`&quot;">​</a></h2><blockquote><p>返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）的键名。</p></blockquote><h2 id="object-getownpropertysymbols-obj" tabindex="-1"><code>Object.getOwnPropertySymbols(obj)</code> <a class="header-anchor" href="#object-getownpropertysymbols-obj" aria-label="Permalink to &quot;`Object.getOwnPropertySymbols(obj)`&quot;">​</a></h2><blockquote><p>返回一个数组，只包含对象自身的所有 Symbol 属性的键名。</p></blockquote><h2 id="reflect-ownkeys-obj" tabindex="-1"><code>Reflect.ownKeys(obj)</code> <a class="header-anchor" href="#reflect-ownkeys-obj" aria-label="Permalink to &quot;`Reflect.ownKeys(obj)`&quot;">​</a></h2><blockquote><p>返回一个数组，包含对象自身的（不含继承的）所有键名，不管键名是 Symbol 或字符串，也不管是否可枚举。</p></blockquote><div class="tip custom-block"><p class="custom-block-title">以上的 5 种方法遍历对象的键名，都遵守同样的属性遍历的次序规则。</p><ul><li>首先遍历所有数值键，按照数值升序排列。</li><li>其次遍历所有字符串键，按照加入时间升序排列。</li><li>最后遍历所有 Symbol 键，按照加入时间升序排列。</li></ul></div><h2 id="判断某个属性是否为自身属性" tabindex="-1">判断某个属性是否为自身属性 <a class="header-anchor" href="#判断某个属性是否为自身属性" aria-label="Permalink to &quot;判断某个属性是否为自身属性&quot;">​</a></h2><p>. <code>obj.hasOwnProperty(key)</code></p><p>. <code>Object.hasOwn(obj, key)</code></p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>对象的属性分成两种：自身的属性和继承的属性</p></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>hasOwnProperty</code>方法继承自Object实例，对于不继承Object.prototype的对象会报错</p></div>',17),b=[a];function r(s,i,n,p,j,d){return t(),o("div",null,b)}const k=e(l,[["render",r]]);export{y as __pageData,k as default};
